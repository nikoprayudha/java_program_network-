/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javatcp;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Inet6Address;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author budi
 */
public class Runtime extends javax.swing.JFrame {

    public int Port = 2000;
    public String ipPublic = "192.168.43";
    public String host;
    
    DefaultListModel Model = new DefaultListModel();
    
    public Runtime(){
        initComponents();
        ListIP.setModel(Model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Restart = new javax.swing.JButton();
        Hibernate = new javax.swing.JButton();
        Shutdown = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListIP = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        Restart.setText("Restart");
        Restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartActionPerformed(evt);
            }
        });

        Hibernate.setText("Hibernate");
        Hibernate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HibernateActionPerformed(evt);
            }
        });

        Shutdown.setText("Shutdown");
        Shutdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShutdownActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ListIP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Hibernate, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Shutdown, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 7, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hibernate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Restart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Shutdown, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartActionPerformed
        int timeout=1000;
        for (int i=1;i<255;i++){
            host=ipPublic + "." + i;
            try {
                if (InetAddress.getByName(host).isReachable(timeout)){
                    if (host.equals(cekIPSaya())) {
                        System.out.println("IP Sendiri oey!");
                    }
                    else{
                        Restart(host);
                    }
                    System.out.println(host + " is reachable");
                }
            } catch (UnknownHostException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_RestartActionPerformed
    
    public String cekIPSaya(){
        String ipSaya = null;
        try {
            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
            while (interfaces.hasMoreElements()) {
                NetworkInterface iface = interfaces.nextElement();
                if (iface.isLoopback() || !iface.isUp())
                    continue;

                Enumeration<InetAddress> addresses = iface.getInetAddresses();
                while(addresses.hasMoreElements()) {
                    InetAddress addr = addresses.nextElement();

                    if (addr instanceof Inet6Address) continue;

                    ipSaya = addr.getHostAddress();
//                    System.out.println(iface.getDisplayName() + " " + ipSaya);
                }
            }
        } catch (SocketException e) {
            throw new RuntimeException(e);
        }
        return ipSaya;
    }
    public void Restart(String IP){
        try {
            String sentence;
            Socket controller = new Socket(IP, Port);
            DataOutputStream outToServer = new DataOutputStream(controller.getOutputStream());
            sentence = "restart";
            outToServer.writeBytes(sentence);
            System.out.println(host+" sudah direstart");
            controller.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    
    public void Shutdown(String IP){
        try {
            String sentence;
            Socket controller = new Socket(IP, Port);
            DataOutputStream outToServer = new DataOutputStream(controller.getOutputStream());
            sentence = "shutdown";
            outToServer.writeBytes(sentence);
            System.out.println(host+" sudah dishutdown");
            controller.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    
    public void Hibernate(String IP){
        try {
            String sentence;
            Socket controller = new Socket(IP, Port);
            DataOutputStream outToServer = new DataOutputStream(controller.getOutputStream());
            sentence = "hibernate";
            outToServer.writeBytes(sentence);
            System.out.println(host+" sudah dihibernate");
            controller.close();
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }
    
    private void HibernateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HibernateActionPerformed
        int timeout=1000;
        for (int i=1;i<255;i++){
            String host=ipPublic + "." + i;
            try {
                if (InetAddress.getByName(host).isReachable(timeout)){
                    if (host.equals(cekIPSaya())) {
                        System.out.println("IP Sendiri oey!");
                    }
                    else{
                        Hibernate(host);
                    }
                    System.out.println(host + " is reachable");
                }
            } catch (UnknownHostException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_HibernateActionPerformed

    private void ShutdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShutdownActionPerformed
        int timeout=1000;
        for (int i=1;i<255;i++){
            String host=ipPublic + "." + i;
            try {
                if (InetAddress.getByName(host).isReachable(timeout)){
                    if (host.equals(cekIPSaya())) {
                        System.out.println("IP Sendiri oey!");
                    }
                    else{
                        Shutdown(host);
                    }
                    System.out.println(host + " is reachable");
                }
            } catch (UnknownHostException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ShutdownActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
//        try {
//            checkHosts("192.168.230");
//        } catch (IOException ex) {
//            Logger.getLogger(Runtime.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Runtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Runtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Runtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Runtime.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Runtime().setVisible(true);
      
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Hibernate;
    private javax.swing.JList<String> ListIP;
    private javax.swing.JButton Restart;
    private javax.swing.JButton Shutdown;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
