/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webcam;

import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.OpenCVFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core;
import com.googlecode.javacv.cpp.opencv_highgui;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import static webcam.Webcamera.getaudioformat;

/**
 *
 * @author user
 */
public class Client extends javax.swing.JFrame {

    /**
     * Creates new form Client
     */
    
    //int port = 88;
    Timer timer;
    public int port = 8888;
    public int portimage = 888;
    public int port_sever = 88;
    public int port_voice = 8;  
    public String add_server = "192.168.100.12";
    
    public static AudioFormat getaudioformat(){
        float sampleRate = 8000.0F;
        int sampleSizeInbits = 16;
        int Channel = 2;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInbits, Channel, signed, bigEndian);
    }
    
    TargetDataLine audio_in;
    public SourceDataLine audio_out;
    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Images = new javax.swing.JLabel();
        ButtonStart = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Start = new javax.swing.JButton();
        Stop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        ButtonStart.setText("Voice Server Faiz");
        ButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartActionPerformed(evt);
            }
        });

        jButton1.setText("Open Camera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Start.setText("Voice Client Niko ");
        Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartActionPerformed(evt);
            }
        });

        Stop.setText("Stop Voice Client");
        Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(Start)
                .addGap(18, 18, 18)
                .addComponent(Stop)
                .addGap(193, 193, 193))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Images, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonStart)
                    .addComponent(jButton1)
                    .addComponent(Start)
                    .addComponent(Stop))
                .addGap(41, 41, 41)
                .addComponent(Images, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        timer = new Timer(100, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
                KirimImage();              
                captureCamera();
                sendImage();
            }
        });
        timer.start(); 
    }//GEN-LAST:event_formWindowOpened

    private void ButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartActionPerformed
        // TODO add your handling code here:
        init_audio();
    }//GEN-LAST:event_ButtonStartActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         Thread webcam = new Thread()
        {
            public void run()
            {
                opencv_highgui.CvCapture capture = opencv_highgui.cvCreateCameraCapture(0);
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_HEIGHT, 720);
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_WIDTH, 720);

                opencv_core.IplImage grabbedImage = opencv_highgui.cvQueryFrame(capture);
                CanvasFrame frame = new CanvasFrame("Webcam");
                while(frame.isVisible() && (grabbedImage=opencv_highgui.cvQueryFrame(capture))!=null)
                {
                    frame.showImage(grabbedImage);
                }
            }
        };
        webcam.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartActionPerformed
        // TODO add your handling code here:
           init_audios();
    }//GEN-LAST:event_StartActionPerformed

    private void StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopActionPerformed
        // TODO add your handling code here:
        ClientVoice.jawab = false;
        Start.setEnabled(true);
        Stop.setEnabled(false);
        
    }//GEN-LAST:event_StopActionPerformed
//  kirim audio 
    public void init_audios(){
        try {
            AudioFormat format = getaudioformat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
            if(!AudioSystem.isLineSupported(info)){
                System.out.println("not suport");
                System.exit(0);
            }
            audio_in = (TargetDataLine) AudioSystem.getLine(info);
            audio_in.open(format);
            audio_in.start();
            Recorder_threadClient r = new Recorder_threadClient();
            InetAddress inet = InetAddress.getByName(add_server);
            r.audio_in = audio_in;
            r.dout= new DatagramSocket();
            r.server_ip = inet;
            r.client_port = port_voice;
            ClientVoice.jawab = true;
            r.start();
            Start.setEnabled(false);
            Stop.setEnabled(true);
        } catch (LineUnavailableException | UnknownHostException | SocketException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 
//    Menerima audio
    public void init_audio() {
        try{
            AudioFormat format = getaudioformat();
            DataLine.Info info_out = new DataLine.Info(SourceDataLine.class, format);
            if(!AudioSystem.isLineSupported(info_out)){
                System.out.println("not support");
                System.exit(0);
            }
            audio_out = (SourceDataLine)AudioSystem.getLine(info_out);
            audio_out.open(format);
            audio_out.start();
            player_thread p = new player_thread();
            p.din = new DatagramSocket(port);
            p.audio_out = audio_out;
            ClientVoice.calling = true;
            p.start();
            ButtonStart.setEnabled(false);
               // audio_in = (SourceDataLine)AudioSystem.getLine(info_out);
        } catch (LineUnavailableException | SocketException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
//Menerima Gambar dari server     
    private void KirimImage(){
        try {
            DatagramSocket clientsocket=new DatagramSocket(portimage);
            byte[] receivedata = new byte[92024];
            DatagramPacket kirim = new DatagramPacket(receivedata, receivedata.length);
            clientsocket.receive(kirim);       
            byte[] buff = kirim.getData();
                
            String pesan = new String(buff, 0, buff.length);
            pesan=pesan.trim();
//            System.out.println("pesan = " + pesan);
            
            if (pesan.equalsIgnoreCase("stop")) {
                clientsocket.close();
                System.exit(0);
            } else {
                InputStream in = new ByteArrayInputStream(buff);
                BufferedImage img = ImageIO.read(in);
                ImageIO.write(img, "jpg", new File("D:\\NikokMenerima.jpg"));
                ImageIcon set = new ImageIcon(img);
                Images.setIcon(set);
                clientsocket.close();            }
        } catch (Exception e) {
                e.printStackTrace();
        }
    }
// Capture camera client   
    private void captureCamera(){
        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
        try{
            grabber.start();
            opencv_core.IplImage img = grabber.grab();
            if(img!=null){
                cvSaveImage("D:\\Faiz.jpg", img);
            }
            grabber.release();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
//    Kirim gambar ke server 
     private void sendImage() {
        try{
            BufferedImage img = ImageIO.read(new File("D:\\Faiz.jpg"));
            ByteArrayOutputStream images = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", images);
//            ImageIcon set = new ImageIcon(img);
//            serverLabel.setIcon(set);
//            images.flush();
            //memastikan paket dikirim
            byte[] buffer = images.toByteArray();
            
            DatagramSocket serverS = new DatagramSocket();       
            InetAddress IpAddress = InetAddress.getByName(add_server);
            System.out.println(buffer.length);

            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, IpAddress, port_sever);

            serverS.send(packet);
            serverS.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonStart;
    private javax.swing.JLabel Images;
    private javax.swing.JButton Start;
    private javax.swing.JButton Stop;
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
