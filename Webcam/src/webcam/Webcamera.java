/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webcam;

import com.googlecode.javacv.CanvasFrame;
import com.googlecode.javacv.OpenCVFrameGrabber;
import com.googlecode.javacv.cpp.opencv_core;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import com.googlecode.javacv.cpp.opencv_highgui;
import com.googlecode.javacv.cpp.opencv_highgui.CvCapture;
import static com.googlecode.javacv.cpp.opencv_highgui.cvSaveImage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.Timer;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.TargetDataLine;

/**
 *
 * @author user
 */
public class Webcamera extends javax.swing.JFrame {

    /**
     * Creates new form Webcamera
     */
    //int port = 88;
    //String ipAdress = "192.168.43.127";
    //String ipAdress = "localhost";
    public int port_client = 8888;
    public String add_client = "192.168.100.21";
    public static AudioFormat getaudioformat(){
        float sampleRate = 8000.0F;
        int sampleSizeInbits = 16;
        int channel = 2;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat (sampleRate, sampleSizeInbits, channel, signed, bigEndian);
    }
    TargetDataLine audio_in;
    Timer timer;
    public Webcamera() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenWebcam = new javax.swing.JButton();
        serverLabel = new javax.swing.JLabel();
        ButtonStart = new javax.swing.JButton();
        ButtonStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        OpenWebcam.setText("Open Webcame");
        OpenWebcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenWebcamActionPerformed(evt);
            }
        });

        ButtonStart.setText("Start");
        ButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStartActionPerformed(evt);
            }
        });

        ButtonStop.setText("Stop");
        ButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(OpenWebcam)
                .addGap(37, 37, 37)
                .addComponent(ButtonStart)
                .addGap(55, 55, 55)
                .addComponent(ButtonStop)
                .addContainerGap(256, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(serverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenWebcam)
                    .addComponent(ButtonStart)
                    .addComponent(ButtonStop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   
    
    
    private void OpenWebcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenWebcamActionPerformed
        // TODO add your handling code here:
        Thread webcam = new Thread()
        {
            public void run()
            {
                opencv_highgui.CvCapture capture = opencv_highgui.cvCreateCameraCapture(0);
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_HEIGHT, 720);
                opencv_highgui.cvSetCaptureProperty(capture, opencv_highgui.CV_CAP_PROP_FRAME_WIDTH, 720);

                opencv_core.IplImage grabbedImage = opencv_highgui.cvQueryFrame(capture);
                CanvasFrame frame = new CanvasFrame("Webcam");
                while(frame.isVisible() && (grabbedImage=opencv_highgui.cvQueryFrame(capture))!=null)
                {
                    frame.showImage(grabbedImage);
                }
            }
        };
        webcam.start();
    }//GEN-LAST:event_OpenWebcamActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        timer = new Timer(50, new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent ae) {
                
                captureCamera();
                sendImage();
                //bukaCamera();
//              menerimaImage();
//              sendImageServer();
            }
        });
        timer.start();
    }//GEN-LAST:event_formWindowOpened

    private void ButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStartActionPerformed
        // TODO add your handling code here:
        init_audio();
    }//GEN-LAST:event_ButtonStartActionPerformed

    private void ButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonStopActionPerformed
        // TODO add your handling code here:
        ServerVoice.calling = false;
        ButtonStart.setEnabled(true);
        ButtonStop.setEnabled(false);
    }//GEN-LAST:event_ButtonStopActionPerformed

    
    public void init_audio(){
        try {
            AudioFormat format = getaudioformat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
            if(!AudioSystem.isLineSupported(info)){
                System.out.println("not suport");
                System.exit(0);
            }
            audio_in = (TargetDataLine) AudioSystem.getLine(info);
            audio_in.open(format);
            audio_in.start();
            recorder_thread r = new recorder_thread();
            InetAddress inet = InetAddress.getByName(add_client);
            r.audio_in = audio_in;
            r.dout= new DatagramSocket();
            r.server_ip = inet;
            r.server_port = port_client;
            ServerVoice.calling = true;
            r.start();
            ButtonStart.setEnabled(false);
            ButtonStop.setEnabled(true);
        } catch (LineUnavailableException | UnknownHostException | SocketException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
 
    private void captureCamera(){
        OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(0);
        try{
            grabber.start();
            opencv_core.IplImage img = grabber.grab();
            if(img!=null){
                cvSaveImage("D:\\Faiz.jpg", img);
            }
            grabber.release();
        }catch (Exception e){
            e.printStackTrace();
        }
    }
    
    
    private void sendImage() {
        try{
            BufferedImage img = ImageIO.read(new File("D:\\Faiz.jpg"));
            ByteArrayOutputStream images = new ByteArrayOutputStream();
            ImageIO.write(img, "jpg", images);
            ImageIcon set = new ImageIcon(img);
            serverLabel.setIcon(set);
            images.flush();
            //memastikan paket dikirim
            byte[] buffer = images.toByteArray();
            
            DatagramSocket serverS = new DatagramSocket();       
            InetAddress IpAddress = InetAddress.getByName(add_client);
            System.out.println(buffer.length);

            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, IpAddress, port_client);

            serverS.send(packet);
            serverS.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Webcamera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Webcamera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Webcamera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Webcamera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Webcamera().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonStart;
    private javax.swing.JButton ButtonStop;
    private javax.swing.JButton OpenWebcam;
    private javax.swing.JLabel serverLabel;
    // End of variables declaration//GEN-END:variables

    
}
